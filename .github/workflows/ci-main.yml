name: libcosimpy CI

# This workflow is triggered on pushes to the repository.
on: [push, workflow_dispatch]

jobs:
  code_quality:
    name: Code Quality
    runs-on: 'ubuntu-latest'
    timeout-minutes: 35
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version-file: 'pyproject.toml'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install dependencies
        run: uv sync --no-install-project
      - name: Run ruff format
        run: uv run --no-project ruff format --diff
      - name: Run ruff check
        run: uv run --no-project ruff check --diff
      - name: Run pyright
        run: uv run --no-project pyright

  test:
    name: Tests
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ 'windows-latest', 'ubuntu-latest' ]
        python-version: [ '3.10', '3.11', '3.12' ]
    timeout-minutes: 35
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Cache conan
        id: cache-conan
        uses: actions/cache@v4
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}

      - name: 'Build wheel'
        run: uv build --wheel
      - name: Copy libcosimc
        run: cp -r build/libcosimc src/libcosimpy
        shell: bash
      - name: Run test
        run: uv run --with pytest pytest

  build_wheels:
    name: Build wheels
    needs:
      - test
      - code_quality
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [ 'windows-latest', 'ubuntu-latest' ]
        python-version: [ 'cp310', 'cp311', 'cp312' ]
    timeout-minutes: 35
    env:
      CONAN_REVISIONS_ENABLED: 1
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Cache conan
        id: cache-conan
        uses: actions/cache@v4
        with:
          path: /.conan2
          key: cibuildwheel-${{ runner.os }}-${{ github.ref_name }}
          restore-keys: |
            cibuildwheel-${{ runner.os }}
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          CIBW_BUILD: "${{ matrix.python-version }}-win_amd64 ${{ matrix.python-version }}-manylinux_x86_64"
          CIBW_BUILD_FRONTEND: build[uv]
          CONAN_HOME: /host/.conan2
      - name: Twine check
        run: | 
           pip install twine
           twine check --strict ./wheelhouse/*
      - uses: actions/upload-artifact@v4
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        name: Upload artifact (wheels)
        with:
          name: libcosimpy-${{ github.ref_name }}-${{ runner.os }}-${{ matrix.python-version }}-wheel
          path: ./wheelhouse/*.whl

  build_source:
    name: Build source
    needs:
      - test
      - code_quality
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Build source
        run: |
          pip install build twine
          python -m build --sdist
          twine check --strict ./dist/*
      - uses: actions/upload-artifact@v4
        if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
        name: Upload artifact (source)
        with:
          name: libcosimpy-${{ github.ref_name }}-source
          path: ./dist/*.tar.gz

  publish:
   if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
   needs:
     - build_wheels
     - build_source
   runs-on: ubuntu-latest
   steps:
     - uses: actions/download-artifact@v4
       with:
         pattern: "*-wheel"
         merge-multiple: true
         path: ./dist/
     - uses: pypa/gh-action-pypi-publish@release/v1
       with:
         user: __token__
         password: ${{ secrets.PYPI_API_TOKEN }}

